// <auto-generated />
using System;
using DLL.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DLL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240424192254_UpdateNew")]
    partial class UpdateNew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BusEntities.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusLineId")
                        .HasColumnType("int");

                    b.Property<string>("BusNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusLineId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusArrivalDeparture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusOperationPlanId")
                        .HasColumnType("int");

                    b.Property<int>("BusStationScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusOperationPlanId");

                    b.HasIndex("BusStationScheduleId");

                    b.ToTable("BusArrivalDeparture");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusLines");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusOperationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusLineId");

                    b.ToTable("BusOperationPlans");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.ToTable("BusSeats");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("BusStations");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusStationSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusStationId");

                    b.ToTable("BusStationSchedule");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusOperationPlanId")
                        .HasColumnType("int");

                    b.Property<int>("BusStationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistanceFromStart")
                        .HasColumnType("int");

                    b.Property<int?>("StandingTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusOperationPlanId");

                    b.HasIndex("BusStationId");

                    b.ToTable("BusStops");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("BusOperationPlanId")
                        .HasColumnType("int");

                    b.Property<int>("BusType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("BusOperationPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("BusTickets");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.Plane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaneLineId")
                        .HasColumnType("int");

                    b.Property<string>("PlaneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaneLineId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneArrivalDeparture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaneOperationPlanId")
                        .HasColumnType("int");

                    b.Property<int>("PlaneStationScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaneOperationPlanId");

                    b.HasIndex("PlaneStationScheduleId");

                    b.ToTable("PlaneArrivalDeparture");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaneLines");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneOperationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaneLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaneLineId");

                    b.ToTable("PlaneOperationPlans");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PlaneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaneId");

                    b.ToTable("PlaneSeats");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PlaneStations");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneStationSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaneStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaneStationId");

                    b.ToTable("PlaneStationSchedule");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistanceFromStart")
                        .HasColumnType("int");

                    b.Property<int>("PlaneOperationPlanId")
                        .HasColumnType("int");

                    b.Property<int>("PlaneStationId")
                        .HasColumnType("int");

                    b.Property<int?>("StandingTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaneOperationPlanId");

                    b.HasIndex("PlaneStationId");

                    b.ToTable("PlaneStops");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaneId")
                        .HasColumnType("int");

                    b.Property<int>("PlaneOperationPlanId")
                        .HasColumnType("int");

                    b.Property<string>("StudentCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlaneId");

                    b.HasIndex("PlaneOperationPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("PlaneTickets");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.Train", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TrainLineId")
                        .HasColumnType("int");

                    b.Property<string>("TrainNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainLineId");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainArrivalDeparture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainOperationPlanId")
                        .HasColumnType("int");

                    b.Property<int>("TrainStationScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainOperationPlanId");

                    b.HasIndex("TrainStationScheduleId");

                    b.ToTable("TrainArrivalsDepartures");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainLines");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainOperationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TrainLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainLineId");

                    b.ToTable("TrainOperationPlans");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("SeatType")
                        .HasColumnType("bit");

                    b.Property<int>("StateType")
                        .HasColumnType("int");

                    b.Property<int>("WagonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WagonId");

                    b.ToTable("TrainSeats");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("TrainStations");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainStationSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainStationId");

                    b.ToTable("TrainStationSchedules");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistanceFromStart")
                        .HasColumnType("int");

                    b.Property<int?>("StandingTime")
                        .HasColumnType("int");

                    b.Property<int>("TrainOperationPlanId")
                        .HasColumnType("int");

                    b.Property<int>("TrainStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainOperationPlanId");

                    b.HasIndex("TrainStationId");

                    b.ToTable("TrainStops");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<int>("TrainId")
                        .HasColumnType("int");

                    b.Property<int>("TrainOperationPlanId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.HasIndex("TrainOperationPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainTickets");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.Wagon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TrainId")
                        .HasColumnType("int");

                    b.Property<int>("WagonType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.ToTable("Wagons");
                });

            modelBuilder.Entity("Domain.Entities.UserEntities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserEntities.BookingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusTicketId")
                        .HasColumnType("int");

                    b.Property<int>("PlaneTicketId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TrainTicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusTicketId");

                    b.HasIndex("PlaneTicketId");

                    b.HasIndex("TrainTicketId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingHistories");
                });

            modelBuilder.Entity("Domain.Entities.UserEntities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.Bus", b =>
                {
                    b.HasOne("Domain.Entities.BusEntities.BusLine", "BusLine")
                        .WithMany("Buses")
                        .HasForeignKey("BusLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusLine");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusArrivalDeparture", b =>
                {
                    b.HasOne("Domain.Entities.BusEntities.BusOperationPlan", "BusOperationPlan")
                        .WithMany()
                        .HasForeignKey("BusOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusEntities.BusStationSchedule", "BusStationSchedule")
                        .WithMany("BusMovements")
                        .HasForeignKey("BusStationScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusOperationPlan");

                    b.Navigation("BusStationSchedule");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusOperationPlan", b =>
                {
                    b.HasOne("Domain.Entities.BusEntities.BusLine", "BusLine")
                        .WithMany("BusOperationPlans")
                        .HasForeignKey("BusLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusLine");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusSeat", b =>
                {
                    b.HasOne("Domain.Entities.BusEntities.Bus", "Bus")
                        .WithMany("BusSeats")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusStation", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.Location", "Location")
                        .WithMany("BusStations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusStationSchedule", b =>
                {
                    b.HasOne("Domain.Entities.BusEntities.BusStation", "BusStation")
                        .WithMany("BusStationSchedules")
                        .HasForeignKey("BusStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusStation");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusStop", b =>
                {
                    b.HasOne("Domain.Entities.BusEntities.BusOperationPlan", "BusOperationPlan")
                        .WithMany("BusStops")
                        .HasForeignKey("BusOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusEntities.BusStation", "BusStation")
                        .WithMany()
                        .HasForeignKey("BusStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusOperationPlan");

                    b.Navigation("BusStation");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusTicket", b =>
                {
                    b.HasOne("Domain.Entities.BusEntities.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BusEntities.BusOperationPlan", "BusOperationPlan")
                        .WithMany()
                        .HasForeignKey("BusOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusOperationPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Location", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.Plane", b =>
                {
                    b.HasOne("Domain.Entities.PlaneEntities.PlaneLine", "PlaneLine")
                        .WithMany("Planes")
                        .HasForeignKey("PlaneLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaneLine");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneArrivalDeparture", b =>
                {
                    b.HasOne("Domain.Entities.PlaneEntities.PlaneOperationPlan", "PlaneOperationPlan")
                        .WithMany()
                        .HasForeignKey("PlaneOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PlaneEntities.PlaneStationSchedule", "PlaneStationSchedule")
                        .WithMany("PlaneMovements")
                        .HasForeignKey("PlaneStationScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaneOperationPlan");

                    b.Navigation("PlaneStationSchedule");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneOperationPlan", b =>
                {
                    b.HasOne("Domain.Entities.PlaneEntities.PlaneLine", "PlaneLine")
                        .WithMany("PlaneOperationPlans")
                        .HasForeignKey("PlaneLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaneLine");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneSeat", b =>
                {
                    b.HasOne("Domain.Entities.PlaneEntities.Plane", "Plane")
                        .WithMany("PlaneSeats")
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plane");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneStation", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.Location", "Location")
                        .WithMany("PlaneStations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneStationSchedule", b =>
                {
                    b.HasOne("Domain.Entities.PlaneEntities.PlaneStation", "PlaneStation")
                        .WithMany("PlaneStationSchedules")
                        .HasForeignKey("PlaneStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaneStation");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneStop", b =>
                {
                    b.HasOne("Domain.Entities.PlaneEntities.PlaneOperationPlan", "PlaneOperationPlan")
                        .WithMany("PlaneStops")
                        .HasForeignKey("PlaneOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PlaneEntities.PlaneStation", "PlaneStation")
                        .WithMany()
                        .HasForeignKey("PlaneStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaneOperationPlan");

                    b.Navigation("PlaneStation");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneTicket", b =>
                {
                    b.HasOne("Domain.Entities.PlaneEntities.Plane", "Plane")
                        .WithMany()
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PlaneEntities.PlaneOperationPlan", "PlaneOperationPlan")
                        .WithMany()
                        .HasForeignKey("PlaneOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plane");

                    b.Navigation("PlaneOperationPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.Train", b =>
                {
                    b.HasOne("Domain.Entities.TrainEntities.TrainLine", "TrainLine")
                        .WithMany("Trains")
                        .HasForeignKey("TrainLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainLine");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainArrivalDeparture", b =>
                {
                    b.HasOne("Domain.Entities.TrainEntities.TrainOperationPlan", "TrainOperationPlan")
                        .WithMany()
                        .HasForeignKey("TrainOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TrainEntities.TrainStationSchedule", "TrainStationSchedule")
                        .WithMany("TrainMovements")
                        .HasForeignKey("TrainStationScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainOperationPlan");

                    b.Navigation("TrainStationSchedule");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainOperationPlan", b =>
                {
                    b.HasOne("Domain.Entities.TrainEntities.TrainLine", "TrainLine")
                        .WithMany("TrainOperationPlans")
                        .HasForeignKey("TrainLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainLine");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainSeat", b =>
                {
                    b.HasOne("Domain.Entities.TrainEntities.Wagon", "Wagon")
                        .WithMany("Seats")
                        .HasForeignKey("WagonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wagon");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainStation", b =>
                {
                    b.HasOne("Domain.Entities.LocationEntities.Location", "Location")
                        .WithMany("TrainStations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainStationSchedule", b =>
                {
                    b.HasOne("Domain.Entities.TrainEntities.TrainStation", "TrainStation")
                        .WithMany("TrainStationSchedules")
                        .HasForeignKey("TrainStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainStation");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainStop", b =>
                {
                    b.HasOne("Domain.Entities.TrainEntities.TrainOperationPlan", "TrainOperationPlan")
                        .WithMany("TrainStops")
                        .HasForeignKey("TrainOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TrainEntities.TrainStation", "TrainStation")
                        .WithMany()
                        .HasForeignKey("TrainStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainOperationPlan");

                    b.Navigation("TrainStation");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainTicket", b =>
                {
                    b.HasOne("Domain.Entities.TrainEntities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TrainEntities.TrainOperationPlan", "TrainOperationPlan")
                        .WithMany()
                        .HasForeignKey("TrainOperationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntities.AppUser", "User")
                        .WithMany("TrainTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Train");

                    b.Navigation("TrainOperationPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.Wagon", b =>
                {
                    b.HasOne("Domain.Entities.TrainEntities.Train", "Train")
                        .WithMany("Wagons")
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Domain.Entities.UserEntities.BookingHistory", b =>
                {
                    b.HasOne("Domain.Entities.BusEntities.BusTicket", "BusTicket")
                        .WithMany()
                        .HasForeignKey("BusTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PlaneEntities.PlaneTicket", "PlaneTicket")
                        .WithMany()
                        .HasForeignKey("PlaneTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TrainEntities.TrainTicket", "TrainTicket")
                        .WithMany()
                        .HasForeignKey("TrainTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntities.AppUser", "User")
                        .WithMany("BookingHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusTicket");

                    b.Navigation("PlaneTicket");

                    b.Navigation("TrainTicket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserEntities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.UserEntities.AppUser", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.UserEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.UserEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.UserEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.Bus", b =>
                {
                    b.Navigation("BusSeats");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusLine", b =>
                {
                    b.Navigation("BusOperationPlans");

                    b.Navigation("Buses");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusOperationPlan", b =>
                {
                    b.Navigation("BusStops");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusStation", b =>
                {
                    b.Navigation("BusStationSchedules");
                });

            modelBuilder.Entity("Domain.Entities.BusEntities.BusStationSchedule", b =>
                {
                    b.Navigation("BusMovements");
                });

            modelBuilder.Entity("Domain.Entities.LocationEntities.Location", b =>
                {
                    b.Navigation("BusStations");

                    b.Navigation("PlaneStations");

                    b.Navigation("TrainStations");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.Plane", b =>
                {
                    b.Navigation("PlaneSeats");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneLine", b =>
                {
                    b.Navigation("PlaneOperationPlans");

                    b.Navigation("Planes");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneOperationPlan", b =>
                {
                    b.Navigation("PlaneStops");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneStation", b =>
                {
                    b.Navigation("PlaneStationSchedules");
                });

            modelBuilder.Entity("Domain.Entities.PlaneEntities.PlaneStationSchedule", b =>
                {
                    b.Navigation("PlaneMovements");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.Train", b =>
                {
                    b.Navigation("Wagons");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainLine", b =>
                {
                    b.Navigation("TrainOperationPlans");

                    b.Navigation("Trains");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainOperationPlan", b =>
                {
                    b.Navigation("TrainStops");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainStation", b =>
                {
                    b.Navigation("TrainStationSchedules");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.TrainStationSchedule", b =>
                {
                    b.Navigation("TrainMovements");
                });

            modelBuilder.Entity("Domain.Entities.TrainEntities.Wagon", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Domain.Entities.UserEntities.AppUser", b =>
                {
                    b.Navigation("BookingHistories");

                    b.Navigation("Feedbacks");

                    b.Navigation("TrainTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
